name: workflowinfra

on:
  push:
    branches: [deploy-stack1]

permissions:
  contents: read
  actions: read

jobs:
  create-resources:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.0
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Init Terraform
        run: |
          cd stack1
          terraform init

      - name: Apply Terraform
        env:
          TF_VAR_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          TF_VAR_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}  
          TF_VAR_region: ${{ secrets.AWS_REGION }}
          TF_VAR_key_public: ${{ secrets.AWS_SSH_PUBLIC_KEY }}
          TF_VAR_repository: ${{ secrets.AWS_ECR_REPOSITORY_NAME }}
          TF_VAR_bucket_name: ${{ secrets.AWS_TERRAFORM_BUCKET_NAME }}
          TF_VAR_service: aws
        run: |
          cd stack1
          terraform apply -auto-approve

      - name: Upload Terraform State to S3
        env:
          BUCKET_NAME: ${{ secrets.AWS_TERRAFORM_BUCKET_NAME }}
          KEY: "dev/terraform.tfstate"  # Cambia esto a tu ruta deseada en S3
        run: |
          aws --version
          cd stack1
          aws s3 cp terraform.tfstate s3://$BUCKET_NAME/$KEY

      - name: Get Elastic IP
        id: get_eip
        run: |
          cd stack1
          OUT_PUBLIC_IP=$(terraform output public_ip | tr -d '"')  # Elimina las comillas
          IP=$(echo "$OUT_PUBLIC_IP" | grep -oP '(\d{1,3}\.){3}\d{1,3}')
          echo "${IP}" > eip.txt  # Guardamos la IP en un file2

      - name: Upload Elastic IP as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: elastic-ip
          path: stack1/eip.txt

      - name: Destroy Terraform resources on failure
        if: failure()  # Solo se ejecuta si un paso anterior falla
        run: |
          cd stack1
          terraform destroy -auto-approve
        env:
          TF_VAR_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          TF_VAR_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}  
          TF_VAR_region: ${{ secrets.AWS_REGION }}
          TF_VAR_key_public: ${{ secrets.AWS_SSH_PUBLIC_KEY }}
          TF_VAR_repository: ${{ secrets.AWS_ECR_REPOSITORY_NAME }}
          TF_VAR_bucket_name: ${{ secrets.AWS_TERRAFORM_BUCKET_NAME }}
          TF_VAR_service: aws
      