name: Deploy_infra

on:
  push:
    branches: [deploy-stack1]

permissions:
  contents: read
  actions: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      - name: Init Terraform
        run: |
          cd stack1
          terraform init

      - name: Apply Terraform
        env:
          TF_VAR_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          TF_VAR_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}  
          TF_VAR_region: ${{ secrets.AWS_REGION }}
          TF_VAR_key_public: ${{ secrets.AWS_SSH_PUBLIC_KEY }}
          TF_VAR_repository: ${{ secrets.AWS_ECR_REPOSITORY_NAME }}
          TF_VAR_service: aws
        run: |
          cd stack1
          terraform apply -auto-approve

      - name: Get Elastic IP
        id: get_eip
        run: |
          cd stack1
          OUTPUT=$(terraform output public_ip | tr -d '"')  # Elimina las comillas
          echo "Output: ${OUTPUT}"  # Esto deberÃ­a mostrar la salida completa
          if [ -z "$OUTPUT" ]; then
            echo "No public IP found. Exiting."
            exit 1
          fi
          echo "EIP=${OUTPUT}" >> $GITHUB_ENV

      - name: Destroy Terraform resources on failure
        if: failure()  # Solo se ejecuta si un paso anterior falla
        run: |
          cd stack1
          terraform destroy -auto-approve
        env:
          TF_VAR_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          TF_VAR_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}  
          TF_VAR_region: ${{ secrets.AWS_REGION }}
          TF_VAR_key_public: ${{ secrets.AWS_SSH_PUBLIC_KEY }}
          TF_VAR_repository: ${{ secrets.AWS_ECR_REPOSITORY_NAME }}
          TF_VAR_service: aws
      