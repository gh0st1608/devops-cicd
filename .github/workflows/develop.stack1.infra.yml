name: Deploy_infra

on:
  push:
    branches: [infra-stack1]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      - name: Init Terraform
        run: |
          cd stack1
          terraform init

      - name: Apply Terraform
        env:
          TF_VAR_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          TF_VAR_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}  
          TF_VAR_region: ${{ secrets.AWS_REGION }}
          TF_VAR_key_pair_public: ${{ secrets.AWS_ECS_CLUSTER_NAME }}
        run: |
          cd stack1
          terraform apply -auto-approve
      
      - name: Output Public IP
        run: |
           echo "public_ip=$(terraform output -raw public_ip)" >> $GITHUB_ENV

      - name: Update GitHub Repository Secret
        env:  
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          curl -X PUT \
            -H "Authorization: token $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/${{ github.repository }}/actions/secrets/ELASTIC_IP \
            -d '{"encrypted_value":"'"$(echo -n ${{ env.public_ip }} | openssl enc -aes-256-cbc -a -salt -pass pass:${{ secrets.AWS_PASSWORD_ENCRYPT }})"'", "visibility":"private"}'

      - name: Destroy Terraform resources on failure
        if: failure()  # Solo se ejecuta si un paso anterior falla
        run: |
          cd stack2
          terraform destroy -auto-approve
        env:
          TF_VAR_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          TF_VAR_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}  
          TF_VAR_region: ${{ secrets.AWS_REGION }}
          TF_VAR_key_pair_public: ${{ secrets.AWS_ECS_CLUSTER_NAME }}
      